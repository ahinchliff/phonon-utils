import { ResponseApdu } from '../src/apdu/apdu-types';
import {
  parsePairStepOneResponse,
  parsePairStepTwoResponse,
  parseSelectPhononAppletResponse,
} from '../src/apdu/responses';

describe('commands', () => {
  describe('parseSelectPhononAppletResponse', () => {
    it('should return the correct result', () => {
      const RESPONSE_APDU: ResponseApdu = {
        status: 1, // todo
        data: new Uint8Array([
          164, 95, 143, 16, 3, 162, 0, 235, 224, 13, 156, 160, 137, 89, 13, 52,
          35, 25, 234, 143, 128, 65, 4, 125, 77, 144, 17, 232, 218, 90, 239,
          151, 120, 217, 31, 153, 229, 222, 209, 43, 231, 172, 121, 110, 74, 18,
          151, 106, 141, 145, 104, 99, 45, 142, 160, 169, 126, 245, 52, 176, 92,
          205, 156, 114, 129, 242, 38, 43, 214, 198, 198, 67, 201, 131, 165, 55,
          21, 94, 176, 160, 228, 57, 134, 85, 62, 178, 165, 2, 2, 0, 4, 3, 1,
          202, 141, 1, 7,
        ]),
      };

      const result = parseSelectPhononAppletResponse(RESPONSE_APDU);

      expect(result.initialised).toEqual(true);

      expect(result.uuid).toEqual(
        new Uint8Array([
          3, 162, 0, 235, 224, 13, 156, 160, 137, 89, 13, 52, 35, 25, 234, 143,
        ])
      );

      expect(result.publicKey).toEqual(
        new Uint8Array([
          4, 125, 77, 144, 17, 232, 218, 90, 239, 151, 120, 217, 31, 153, 229,
          222, 209, 43, 231, 172, 121, 110, 74, 18, 151, 106, 141, 145, 104, 99,
          45, 142, 160, 169, 126, 245, 52, 176, 92, 205, 156, 114, 129, 242, 38,
          43, 214, 198, 198, 67, 201, 131, 165, 55, 21, 94, 176, 160, 228, 57,
          134, 85, 62, 178, 165,
        ])
      );
    });
  });

  describe('parsePairStepOneResponse', () => {
    it('should return the correct result', () => {
      const RESPONSE_APDU: ResponseApdu = {
        status: 1, // todo
        data: new Uint8Array([
          173, 150, 107, 44, 200, 72, 249, 127, 99, 38, 100, 182, 175, 225, 232,
          105, 201, 213, 107, 225, 69, 135, 75, 33, 117, 223, 174, 219, 26, 103,
          178, 73, 48, 145, 2, 2, 0, 0, 128, 65, 4, 255, 58, 73, 86, 249, 2,
          233, 99, 55, 222, 24, 56, 32, 108, 144, 41, 123, 213, 140, 134, 145,
          134, 121, 250, 247, 2, 132, 213, 124, 79, 242, 136, 65, 235, 77, 244,
          185, 213, 172, 173, 63, 85, 206, 231, 199, 20, 47, 132, 175, 13, 173,
          135, 55, 183, 217, 63, 165, 215, 63, 232, 104, 70, 152, 62, 48, 70, 2,
          33, 0, 138, 21, 102, 73, 52, 90, 138, 188, 45, 187, 232, 120, 234,
          191, 15, 243, 170, 150, 239, 168, 243, 7, 158, 105, 43, 10, 38, 121,
          245, 77, 165, 172, 2, 33, 0, 250, 40, 19, 179, 126, 169, 221, 90, 1,
          225, 189, 237, 151, 108, 76, 139, 141, 214, 40, 7, 88, 155, 140, 233,
          131, 235, 179, 44, 236, 220, 220, 157, 0, 0, 48, 70, 2, 33, 0, 207,
          19, 143, 188, 241, 41, 159, 186, 219, 213, 123, 41, 236, 202, 212, 61,
          70, 31, 226, 53, 248, 104, 55, 135, 5, 120, 222, 89, 197, 138, 1, 218,
          2, 33, 0, 187, 191, 157, 194, 168, 127, 126, 200, 224, 19, 153, 70,
          213, 199, 59, 129, 6, 124, 73, 116, 36, 145, 196, 83, 25, 203, 146,
          87, 232, 234, 44, 132,
        ]),
      };

      const result = parsePairStepOneResponse(RESPONSE_APDU);

      expect(result.pairingSalt).toEqual(
        new Uint8Array([
          173, 150, 107, 44, 200, 72, 249, 127, 99, 38, 100, 182, 175, 225, 232,
          105, 201, 213, 107, 225, 69, 135, 75, 33, 117, 223, 174, 219, 26, 103,
          178, 73,
        ])
      );

      expect(result.pairingSignature).toEqual(
        new Uint8Array([
          48, 70, 2, 33, 0, 207, 19, 143, 188, 241, 41, 159, 186, 219, 213, 123,
          41, 236, 202, 212, 61, 70, 31, 226, 53, 248, 104, 55, 135, 5, 120,
          222, 89, 197, 138, 1, 218, 2, 33, 0, 187, 191, 157, 194, 168, 127,
          126, 200, 224, 19, 153, 70, 213, 199, 59, 129, 6, 124, 73, 116, 36,
          145, 196, 83, 25, 203, 146, 87, 232, 234, 44, 132,
        ])
      );

      expect(result.cardIdentityCertificate.publicKey).toEqual(
        new Uint8Array([
          4, 255, 58, 73, 86, 249, 2, 233, 99, 55, 222, 24, 56, 32, 108, 144,
          41, 123, 213, 140, 134, 145, 134, 121, 250, 247, 2, 132, 213, 124, 79,
          242, 136, 65, 235, 77, 244, 185, 213, 172, 173, 63, 85, 206, 231, 199,
          20, 47, 132, 175, 13, 173, 135, 55, 183, 217, 63, 165, 215, 63, 232,
          104, 70, 152, 62,
        ])
      );

      expect(result.cardIdentityCertificate.signature).toEqual(
        new Uint8Array([
          48, 70, 2, 33, 0, 138, 21, 102, 73, 52, 90, 138, 188, 45, 187, 232,
          120, 234, 191, 15, 243, 170, 150, 239, 168, 243, 7, 158, 105, 43, 10,
          38, 121, 245, 77, 165, 172, 2, 33, 0, 250, 40, 19, 179, 126, 169, 221,
          90, 1, 225, 189, 237, 151, 108, 76, 139, 141, 214, 40, 7, 88, 155,
          140, 233, 131, 235, 179, 44, 236, 220, 220, 157,
        ])
      );
    });
  });

  describe('parsePairStepTwoResponse', () => {
    it('should return the correct result', () => {
      const RESPONSE_APDU: ResponseApdu = {
        status: 1, // todo
        data: new Uint8Array([
          0, 164, 68, 199, 72, 182, 132, 71, 136, 1, 211, 96, 217, 139, 30, 67,
          147, 36, 191, 67, 77, 226, 50, 67, 101, 17, 95, 99, 14, 240, 48, 88,
          86,
        ]),
      };

      const result = parsePairStepTwoResponse(RESPONSE_APDU);

      expect(result.pairingIndex).toEqual(0);

      expect(result.salt).toEqual(
        new Uint8Array([
          164, 68, 199, 72, 182, 132, 71, 136, 1, 211, 96, 217, 139, 30, 67,
          147, 36, 191, 67, 77, 226, 50, 67, 101, 17, 95, 99, 14, 240, 48, 88,
          86,
        ])
      );
    });
  });
});
